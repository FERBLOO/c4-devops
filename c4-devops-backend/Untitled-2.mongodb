// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

const database = 'ciclo4-db';
const collection = 'projects';

// The current database to use.
use(database);

// Create a new collection.
db.createCollection(collection, {
validator: {
    $jsonSchema: {
      required: ['name', 'generalObjetive', 'SpecificObjetives', 'budget', 'startDate', 'endDate', 'leaderDocumentId', 'leaderName', 'status', 'phase'],
      properties: {
        name: {
          bsonType: 'string'
        },
        generalObjetive: {
          bsonType: 'string'
        },
        SpecificObjetives: {
          bsonType: 'array'
        },
        budget: {
          bsonType: 'decimal'
        },
        startDate: {
          bsonType: 'date'
        },
        endDate: {
          bsonType: 'date'
        },
        leaderId: {
          bsonType: 'objectId'
        },
        leaderDocumentId: {
          bsonType: 'double'
        },
        // leader: {
        //   bsonType: 'object'
        //   properties: {
        //     name: {
        //       bsonType: 'string'
        //     }
        //   }
        // },
        leaderName: {
          bsonType: 'string'
        },
        status: {
          enum: ['active', 'inactive']
        },
        phase: {
          enum: ['started' , 'in progress', 'finished']
        }
      }
    }
  }


});

// The prototype form to create a regular collection:
/* db.createCollection( <name>,
  {
    capped: <boolean>,
    autoIndexId: <boolean>,
    size: <number>,
    max: <number>,
    storageEngine: <document>,
    validator: <document>,
    validationLevel: <string>,
    validationAction: <string>,
    indexOptionDefaults: <document>,
    viewOn: <string>,
    pipeline: <pipeline>,
    collation: <document>,
    writeConcern: <document>
  }
) */

// The prototype form to create a time-series collection:
/* db.createCollection( <name>,
  {
    timeseries: {
      timeField: <string>,
      metaField: <string>,
      granularity: <string>
    },
    expireAfterSeconds: <number>
  }
) */
